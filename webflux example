public Flux<Account> getAccounts(String token) {
        return cbsAccountsClient.get()
                .uri("cbs/v1/accounts")
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                .retrieve()
                .bodyToFlux(Account.class)
                .filter(account -> account.getStatus() == null || account.getStatus().getCode() != closedStatusCode); //todo: need to be tested
    }



 private Mono<ResponseEntity<String>> getJwt(
            @NonNull String mtbToken, @NonNull String correlationId) {
        return cbsAuthClient
                .get()
                .uri(uriBuilder -> uriBuilder.path(tokenizationUri).build())
                .headers(
                        httpHeaders -> {
                            httpHeaders.add("MTBToken", mtbToken);
                            httpHeaders.add(MdcHelper.correlationId, correlationId);
                        })
                .retrieve()
                .toEntity(String.class)
                .subscribeOn(authScheduler)
                .elapsed()
                .flatMap(
                        tuple -> {
                            MdcHelper.selectiveLog(
                                    tuple.getT1(),
                                    authCbsLogTimeThresholdMs,
                                    correlationId,
                                    log,
                                    ResponseLogMessage.builder()
                                            .methodName("getJwt")
                                            .processingStatus(ProcessingStatus.SUCCESS)
                                            .args(new Object[]{mtbToken})
                                            .elapsedTimeMs(tuple.getT1())
                                            .response(tuple.getT2())
                                            .build());
                            return Mono.just(tuple.getT2());
                        })
                .doOnError(
                        e ->
                                MdcHelper.logError(
                                        correlationId,
                                        log,
                                        ResponseLogMessage.builder()
                                                .methodName("getJwt")
                                                .processingStatus(ProcessingStatus.FAILURE)
                                                .args(new Object[]{mtbToken})
                                                .build()))
                .doOnSubscribe(
                        x ->
                                MdcHelper.logTrace(
                                        correlationId,
                                        log,
                                        ResponseLogMessage.builder()
                                                .methodName("getJwt")
                                                .processingStatus(ProcessingStatus.SUBSCRIBE)
                                                .args(new Object[]{mtbToken})
                                                .build()));
    }




public static void selectiveLog(
      long eval1,
      long eval2,
      String correlationId,
      Logger logger,
      String message,
      Object... parameters) {
    if (eval1 > eval2) {
      logWarn(correlationId, logger, message, parameters);
    } else {
      logTrace(correlationId, logger, message, parameters);
    }
  }

  public static void selectiveLog(
      long eval1,
      long eval2,
      String correlationId,
      Logger logger,
      ResponseLogMessage responseLogMessage) {
    if (eval1 > eval2) {
      logWarn(correlationId, logger, responseLogMessage);
    } else {
      logTrace(correlationId, logger, responseLogMessage);
    }
  }

  /**
   * Only log based on the evaluation criteria passed in
   *
   * <p>Here, we are trying to reduce the logging unless needed based on trace enabled or if the
   * value is greater than expected; then the log will be a warning
   *
   * @param eval1 process value
   * @param eval2 Threshold value
   * @param correlationId
   * @param logger
   * @param message Message formatted like SLF4J log messages
   * @param parameters Optional parameters to pass into the message. <b>Note:</b> If you want to
   *     serialize an object, wrap it in a DelaySerialization.class and this will process it only if
   *     that logger is enabled
   */
  public static void selectiveLog(
      double eval1,
      double eval2,
      String correlationId,
      Logger logger,
      String message,
      Object... parameters) {
    if (eval1 > eval2) {
      logWarn(correlationId, logger, message, parameters);
    } else {
      logTrace(correlationId, logger, message, parameters);
    }
  }
