package com.mtb.iap.common.exceptions;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BadUserRequestExceptionTest {

    private StandardizedExceptions.ErrorCodeEnum errorCode;

    @BeforeEach
    public void setUp() {
        errorCode = StandardizedExceptions.ErrorCodeEnum.BAD_REQUEST_400100;
    }

    @Test
    public void testConstructorWithOnlyErrorCode() {
        BadUserRequestException exception = new BadUserRequestException(errorCode);

        assertEquals(errorCode, exception.getErrorCode());
        assertEquals(0, exception.getMessageParameters().length);
        assertEquals(StandardizedExceptions.cleanupParameterlessMessage(errorCode.getErrorMessage()), exception.getMessage());
    }

    @Test
    public void testConstructorWithErrorCodeAndParameters() {
        String param = "testParam";
        BadUserRequestException exception = new BadUserRequestException(errorCode, param);

        assertEquals(errorCode, exception.getErrorCode());
        assertEquals(1, exception.getMessageParameters().length);
        assertEquals(param, exception.getMessageParameters()[0]);
        assertTrue(exception.getMessage().contains(param));
    }

    @Test
    public void testConstructorWithErrorCodeAndCause() {
        Throwable cause = new RuntimeException("testCause");
        BadUserRequestException exception = new BadUserRequestException(errorCode, cause);

        assertEquals(errorCode, exception.getErrorCode());
        assertEquals(0, exception.getMessageParameters().length);
        assertEquals(StandardizedExceptions.cleanupParameterlessMessage(errorCode.getErrorMessage()), exception.getMessage());
        assertEquals(cause, exception.getCause());
    }

    @Test
    public void testConstructorWithErrorCodeParametersAndCause() {
        Throwable cause = new RuntimeException("testCause");
        String param = "testParam";
        BadUserRequestException exception = new BadUserRequestException(errorCode, cause, param);

        assertEquals(errorCode, exception.getErrorCode());
        assertEquals(1, exception.getMessageParameters().length);
        assertEquals(param, exception.getMessageParameters()[0]);
        assertTrue(exception.getMessage().contains(param));
        assertEquals(cause, exception.getCause());
    }
}

