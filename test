using InterceptApis.Core.Interfaces.Services;
using InterceptApis.Core.Models.LegacyRest.Accounts;
using InterceptApis.Shared.Binders;
using InterceptApis.Shared.Constants;
using InterceptApis.Shared.Enums.Legacy;
using InterceptApis.Shared.Filters;
using InterceptApis.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Net.Mime;
using HttpGetAttribute = Microsoft.AspNetCore.Mvc.HttpGetAttribute;
using RouteAttribute = Microsoft.AspNetCore.Mvc.RouteAttribute;

namespace InterceptApis.WebApi.Controllers
{
    [Route("v3/accounts")]
    [ApiController]
    [Produces(MediaTypeNames.Application.Json)]
    public class AccountsController : ControllerBase
    {
        private readonly IAccountsService _accountsService;

        public AccountsController(IAccountsService accountsService)
        {
            _accountsService = accountsService;
        }

        /// <summary>
        /// Get accounts
        /// </summary>
        /// <param name="user"></param>
        /// <param name="filter"></param>
        /// <returns>List of accounts</returns>
        [ProducesResponseType(typeof(AccountSummary), StatusCodes.Status200OK)]
        [HttpGet]
        public IActionResult GetAccountSummary([MtbToken, Required] User user, [FromQuery] AccountsFilter filter)
        {
            filter.RelatedAccounts = ServiceConstant.Primary;
            var accounts = _accountsService.GetAccountSummary(user, filter);
            var cardsJson = JsonConvert.SerializeObject(accounts, Formatting.Indented);
            var accountsList = System.Text.Json.JsonSerializer.Deserialize(cardsJson, typeof(object));
            return Ok(accountsList);
        }

        /// <summary>
        /// Retrieves (default from list) accounts list if there are no filters mentioned 
        /// Retrieves TO list for the mentioned account index in the query
        /// </summary>
        /// <param name="user"></param>
        /// <param name="filter"></param>
        /// <returns>List of transaction (MCD) accounts</returns>
        [ProducesResponseType(typeof(List<Account>), StatusCodes.Status200OK)]
        [Route("transactionaccounts")]
        [HttpGet]
        public IActionResult GetTransactionAccounts([MtbToken, Required] User user, [FromQuery] AccountsFilter filter)
        {
            filter.AccountListType = AccountListType.To;
            filter.Module = Module.CheckDeposit;

            return Ok(_accountsService.GetTransactionAccounts(user, filter));
        }

        /// <summary>
        /// Get the account details
        /// </summary>
        /// <param name="user"></param>
        /// <param name="id"></param>
        /// <param name="filter"></param>
        /// <returns>Details of a specified account</returns>
        [ProducesResponseType(typeof(AccountDetails), StatusCodes.Status200OK)]
        [Route("{id:int}")]
        [HttpGet]
        public IActionResult GetAccountDetails([MtbToken, Required] User user, [Required] int id, [FromQuery] AccountsFilter filter)
        {
            return Ok(_accountsService.GetAccountDetails(user, id, filter));
        }
    }
}








