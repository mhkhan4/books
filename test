using InterceptApis.Core.Interfaces.Providers;
using InterceptApis.Core.Interfaces.Services;
using InterceptApis.Core.Mappers;
using InterceptApis.Core.Models.LegacyRest.Accounts;
using InterceptApis.Core.Models.LegacyRest.Card;
using InterceptApis.Shared.Constants;
using InterceptApis.Shared.Enums.Legacy;
using InterceptApis.Shared.Exceptions;
using InterceptApis.Shared.Filters;
using InterceptApis.Shared.Helpers;
using InterceptApis.Shared.Models;

namespace InterceptApis.Core.Services
{
    public class AccountsService : IAccountsService
    {
        private readonly ICbsAccountsProvider _cbsAccountsProvider;
        private readonly AccountsMapper _accountsMapper;

        public AccountsService(ICbsAccountsProvider cbsAccountsProvider)
        {
            _cbsAccountsProvider = cbsAccountsProvider;
            _accountsMapper = new AccountsMapper();
        }

        public Models.Cbs.Accounts.Account GetCbsAccount(User user, int id, AccountsFilter filter)
        {
            var accounts = _cbsAccountsProvider.GetAccounts(user, filter);

            var accountsList = accounts.Where(ac => ac.Status.Code != ProductCode.ClosedStatusCode).ToList();
            if (!accountsList.Any())
            {
                throw new NotFoundException(ErrorCode.NotFoundError, nameof(ErrorCode.NotFoundError).GetUserDescription<ErrorCode>(), nameof(ErrorCode.NotFoundError).GetDeveloperDescription<ErrorCode>());
            }
            _accountsMapper.GenerateAccountIndexes(accountsList, user.MtbToken);

            var account = accountsList.FirstOrDefault(q => q.Index == id);

            return account;
        }

        public AccountSummary GetAccountSummary(User user, AccountsFilter filter)
        {
            var accounts = _cbsAccountsProvider.GetAccounts(user, filter);
            var accountsList = accounts.Where(x => x.Status != null)
                                        .Where(ac => ac.Status.Code != ProductCode.ClosedStatusCode).ToList();
            if (!accountsList.Any())
            {
                throw new NotFoundException(ErrorCode.AccountsNotFound, nameof(ErrorCode.AccountsNotFound).GetUserDescription<ErrorCode>(), nameof(ErrorCode.AccountsNotFound).GetDeveloperDescription<ErrorCode>());
            }
            _accountsMapper.GenerateAccountIndexes(accountsList, user.MtbToken);
            var accountSummary = new AccountSummary
            {
                CheckingAccountsResults = _accountsMapper.MapCheckingAccounts(accountsList.Where(x => ProductCode.CheckingAccounts.Contains(x.ProductCode.ToUpper()))),
                InvestmentAccountsResults = _accountsMapper.MapInvestmentAccounts(accountsList.Where(x => ProductCode.InvestmentAccounts.Contains(x.ProductCode.ToUpper()))),
                CreditAccountsResults = _accountsMapper.MapCreditAccounts(accountsList.Where(x => ProductCode.CreditAccounts.Contains(x.ProductCode.ToUpper()))),
                LoanAccountsResults = _accountsMapper.MapLoanAccounts(accountsList.Where(x => ProductCode.LoanAccounts.Contains(x.ProductCode.ToUpper())))
            };

            return accountSummary;
        }

        public List<Account> GetTransactionAccounts(User user, AccountsFilter filter)
        {
            var accounts = _cbsAccountsProvider.GetAccounts(user, filter);

            switch (filter.Module)
            {
                case Module.CheckDeposit:
                    if (filter.AccountListType == AccountListType.To)
                    {
                        var checkingAccounts = _accountsMapper.MapCheckingAccounts(accounts
                            .Where(x => ProductCode.CheckingAccounts.Contains(x.ProductCode.ToUpper())));

                        return _accountsMapper.MapTransactionAccounts(checkingAccounts);
                    }
                    break;
            }

            throw new BadRequestException(ErrorCode.InvalidRequest, nameof(ErrorCode.InvalidRequest).GetUserDescription<ErrorCode>(), nameof(ErrorCode.InvalidRequest).GetDeveloperDescription<ErrorCode>());
        }

        public AccountDetails GetAccountDetails(User user, int id, AccountsFilter filter)
        {
            var accounts = GetAccountSummary(user, filter);
            var key = GetCbsAccountKeyFromIndex(accounts, id);

            var cbsAccountDetails = _cbsAccountsProvider.GetAccountDetails(user, key, filter) ?? throw new NotFoundException(ErrorCode.NotFoundError, nameof(ErrorCode.NotFoundError).GetUserDescription<ErrorCode>(), nameof(ErrorCode.NotFoundError).GetDeveloperDescription<ErrorCode>());
            var legacyAccountDetails = _accountsMapper.MapAccountDetails(cbsAccountDetails);
            legacyAccountDetails.AccountInfo.AccountIndex = id;
            legacyAccountDetails.AccountInfo.AccountKey.AccountIndex = id;

            return legacyAccountDetails;
        }

        private string GetCbsAccountKeyFromIndex(AccountSummary accounts, int id)
        {
            var key = string.Empty;

            foreach (var account in accounts.CheckingAccountsResults)
            {
                if (account.AccountIndex == id)
                {
                    key = account.CbsAccountKey;
                    return key;
                }
            }

            foreach (var account in accounts.CreditAccountsResults)
            {
                if (account.AccountIndex == id)
                {
                    key = account.CbsAccountKey;
                    return key;
                }
            }

            foreach (var account in accounts.InvestmentAccountsResults)
            {
                if (account.AccountIndex == id)
                {
                    key = account.CbsAccountKey;
                    return key;
                }
            }

            foreach (var account in accounts.LoanAccountsResults)
            {
                if (account.AccountIndex == id)
                {
                    key = account.CbsAccountKey;
                    return key;
                }
            }

            return key;
        }

        public List<Card> GetLinkedAccounts(User user, string accountNumber, string productCode)
        {
            var cbsAccountDetails = _cbsAccountsProvider.GetLinkedAccounts(user, accountNumber, productCode) ?? throw new NotFoundException(ErrorCode.NotFoundError, nameof(ErrorCode.NotFoundError).GetUserDescription<ErrorCode>(), nameof(ErrorCode.NotFoundError).GetDeveloperDescription<ErrorCode>());
            var linkedAccounts = _accountsMapper.MapLinkedAccountDetails(cbsAccountDetails.Single());
            return linkedAccounts;
        }
    }
}








using InterceptApis.Core.Interfaces.Services;
using InterceptApis.Core.Models.LegacyRest.Accounts;
using InterceptApis.Shared.Binders;
using InterceptApis.Shared.Constants;
using InterceptApis.Shared.Enums.Legacy;
using InterceptApis.Shared.Filters;
using InterceptApis.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Net.Mime;
using HttpGetAttribute = Microsoft.AspNetCore.Mvc.HttpGetAttribute;
using RouteAttribute = Microsoft.AspNetCore.Mvc.RouteAttribute;

namespace InterceptApis.WebApi.Controllers
{
    [Route("v3/accounts")]
    [ApiController]
    [Produces(MediaTypeNames.Application.Json)]
    public class AccountsController : ControllerBase
    {
        private readonly IAccountsService _accountsService;

        public AccountsController(IAccountsService accountsService)
        {
            _accountsService = accountsService;
        }

        /// <summary>
        /// Get accounts
        /// </summary>
        /// <param name="user"></param>
        /// <param name="filter"></param>
        /// <returns>List of accounts</returns>
        [ProducesResponseType(typeof(AccountSummary), StatusCodes.Status200OK)]
        [HttpGet]
        public IActionResult GetAccountSummary([MtbToken, Required] User user, [FromQuery] AccountsFilter filter)
        {
            filter.RelatedAccounts = ServiceConstant.Primary;
            var accounts = _accountsService.GetAccountSummary(user, filter);
            var cardsJson = JsonConvert.SerializeObject(accounts, Formatting.Indented);
            var accountsList = System.Text.Json.JsonSerializer.Deserialize(cardsJson, typeof(object));
            return Ok(accountsList);
        }

        /// <summary>
        /// Retrieves (default from list) accounts list if there are no filters mentioned 
        /// Retrieves TO list for the mentioned account index in the query
        /// </summary>
        /// <param name="user"></param>
        /// <param name="filter"></param>
        /// <returns>List of transaction (MCD) accounts</returns>
        [ProducesResponseType(typeof(List<Account>), StatusCodes.Status200OK)]
        [Route("transactionaccounts")]
        [HttpGet]
        public IActionResult GetTransactionAccounts([MtbToken, Required] User user, [FromQuery] AccountsFilter filter)
        {
            filter.AccountListType = AccountListType.To;
            filter.Module = Module.CheckDeposit;

            return Ok(_accountsService.GetTransactionAccounts(user, filter));
        }

        /// <summary>
        /// Get the account details
        /// </summary>
        /// <param name="user"></param>
        /// <param name="id"></param>
        /// <param name="filter"></param>
        /// <returns>Details of a specified account</returns>
        [ProducesResponseType(typeof(AccountDetails), StatusCodes.Status200OK)]
        [Route("{id:int}")]
        [HttpGet]
        public IActionResult GetAccountDetails([MtbToken, Required] User user, [Required] int id, [FromQuery] AccountsFilter filter)
        {
            return Ok(_accountsService.GetAccountDetails(user, id, filter));
        }
    }
}








