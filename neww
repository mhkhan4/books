public void GenerateAccountIndexes(List<Account> accounts, string mtbToken)
        {
            for (var x = 0; x < accounts.Count; x++)
            {
                accounts[x].Index = x + 1;
            }
        }



  @Override
  public Mono<ResponseEntity<List<Account>>> getAccountSummary(String cbaToken, AccountsFilter filter, String corrId) {
    //todo: throw exception on receiving empty list??

    AccountSummary accountSummary = new AccountSummary();
    accountsRepository.getAccounts(cbaToken, String.valueOf(corrId))
            .flatMap(responseEntity->
                    List<Account> accountList = responseEntity.getBody();
            for(account: accountList){
              if(checkingAccounts.contains(account.getProductCode)){
                
              }
            }
                    )

  }


java.lang.RuntimeException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `com.mtb.iap.common.model.accounts.CheckingAccount` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)
 at [Source: (String)"{"checkingAccountsResults":[{"accountKey":{"accountIndex":1,"productCode":"DDA","accountNumber":"8700183216","inActive":false},"subProductCode":"A8","accountName":"Classic Checking with Interest","accountNickName":"Classic Checking with Interest (3216)","accountCategory":"CHECKING","accountNumber":"8700183216","accountTypeOfx":"Checking","rtn":null,"productCode":null,"accountIndex":1,"name":null},{"accountKey":{"accountIndex":2,"productCode":"DDA","accountNumber":"987479595934","inActive":false}"[truncated 1185 chars]; line: 1, column: 30] (through reference chain: com.mtb.iap.common.model.accounts.AccountSummary["checkingAccountsResults"]->java.util.ArrayList[0])


@Data
@SuperBuilder
public class Account {
    @JsonIgnore
    private String cbsAccountKey;
    private AccountKey accountKey;
    private String subProductCode;
    private String accountName;
    private String accountNickName;
    private String accountCategory;
    private String accountNumber;
    private String accountTypeOfx;
    private String rtn;
    private String productCode;
    private int accountIndex;
    private String name;

}


@Data
@SuperBuilder
public class CheckingAccount extends Account{

}


@Data
@SuperBuilder
public class CreditAccount extends Account{
    private String embossing;
    private String relCode;

}


@Data
@SuperBuilder
public class InvestmentAccount extends Account{
}


@Data
@SuperBuilder
public class LoanAccount extends Account{
}




@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class AccountSummary {
    private List<CheckingAccount> checkingAccountsResults;
    private List<InvestmentAccount> investmentAccountsResults;
    private List<CreditAccount> creditAccountsResults;
    private List<LoanAccount> loanAccountsResults;

}



  AccountSummary response =
                given()
                        .headers(
                                Map.of(
                                        "MTBToken", mtbToken,
                                        "corr_id", correlationId
                                ))
                        .contentType("application/json")
                        .get("/v3/accounts")
                        .then()
                        .assertThat()
                        .statusCode(HttpStatus.OK.value())
                        .extract()
                        .body()
                        .as(AccountSummary.class);

        JSONAssert.assertEquals(
                TestUtil.getTestFileData("files/accounts/getAccountsExpectedResponse.json"),
                Util.objectWriter.writeValueAsString(response),
                JSONCompareMode.LENIENT);
    }
